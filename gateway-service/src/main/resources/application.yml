server:
  port: 8000

spring:
  application:
    name: gateway-service #고유 ID
  config:
    import: optional:configserver:http://127.0.0.1:8888
  cloud:
    config:
      name: ecommerce
    gateway:
      #global filter 적용
      default-filters:
        - name : GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true
      #routing 정보
      routes:
        - id: first-service
          uri: lb://MY-FIRST-SERVICE
          predicates:
            - Path=/first-service/**
          filters:
#            - AddRequestHeader=first-request, first-request-header2
#            - AddResponseHeader=first-response, first-response-header2
            - CustomFilter
        - id: second-service
          uri: lb://MY-SECOND-SERVICE
          predicates:
            - Path=/second-service/**
          filters:
#            - AddRequestHeader=second-request, second-request-header2
#            - AddResponseHeader=second-response, second-response-header2
            - name: CustomFilter
            - name: LoggingFilter
              args:
                baseMessage: Apply Custom Logging Filter!
                preLogger: true
                postLogger: true
#        - id: user-service
#          uri: lb://USER-SERVICE
#          predicates:
#            - Path=/user-service/**
        #로그인 - 권한없이 접근
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/login
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie #post 전달되는 데이터는 매번 새로운걸로 인식하게 하기 위하여
            - RewritePath=/user-service/(?<segment>.*), /$\{segment} #앞쪽의 패턴으로 들어오면 뒤쪽의 패턴으로 바꾸겠다.
        #회원가입 - 권한없이 접근
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/users
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        #그외 서비스 - 권한 필요
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/**
            - Method=GET
          filters:
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
            - RemoveRequestHeader=Cookie
            - AuthorizationHeaderFilter
        #그외 서비스 - 권한 필요
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/actuator/**
            - Method=GET,POST
          filters:
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
            - RemoveRequestHeader=Cookie
        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          predicates:
            - Path=/catalog-service/**
        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/**

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url: #서버의 위치 지정
      defaultZone: http://127.0.0.1:8761/eureka #유레카 엔드포인트에 마이크로서비스 정보 등록

# 토큰 키 지정
#token:
#  secret: user_token

#actuator 설정
management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, httptrace
